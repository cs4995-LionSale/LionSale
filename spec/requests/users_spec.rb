 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/users", type: :request do
  
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    {
      email: "email@columbia.edu",
      username: "Username",
      password: "Password Digest",
      password_confirmation: "Password Digest",
      address: "Address",
      rating_seller: 2.5,
      rating_buyer: 3.5,
      permission: 4
    }
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    {
      email: "Email",
      username: "Username",
      password: "Password Digest",
      password_confirmation: "Pasword Digest",
      address: "Address",
      rating_seller: 2.5,
      rating_buyer: 3.5,
      permission: 4
    }
    
  }

  # describe "GET /index" do
  #   it "renders a successful response" do
  #     User.create! valid_attributes
  #     get users_url
  #     expect(response).to be_successful
  #   end
  # end

  describe "GET /show" do
    it "renders a successful response" do
      user = User.create! valid_attributes
      get user_url(user)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get signup_url()
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      user = User.create! valid_attributes
      get edit_user_url(user)
      # raise response.body 
      expect(response).to redirect_to(login_url)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new User" do
        expect {
          post signup_url, params: { user: valid_attributes }
        }.to change(User, :count).by(1)
      end

      it "redirects to the created user" do
        post signup_url, params: { user: valid_attributes }
        expect(response).to redirect_to(user_url(User.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new User" do
        expect {
          post signup_url, params: { user: invalid_attributes }
        }.to change(User, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post signup_url, params: { user: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      # let(:new_attributes) {
      #   # skip("Add a hash of attributes valid for your model")
      #   {
      #     email: "eeeeemail@columbia.edu",
      #     username: "Username",
      #     password: "Password Digest",
      #     password_confirmation: "Password Digest",
      #     address: "Address",
      #     rating_seller: 2.5,
      #     rating_buyer: 3.5,
      #     permission: 4
      #   }
      # }


  #     # TODO:cucumber

      
      it "updates the requested user" do
        # user = User.create! valid_attributes
        # post login_url(), params: { email: "amber@example.com", password: "AmberPassword",remember_me:"0" }
        
        post login_url(), params: { email: "admin@example.com", password: "AdminPassword",remember_me:"0" }
        user_new = {
            email: "ee234mail@columbia.edu",
            username: "name", 
            address: "Adddddress",
        }
        
        # patch user_url(1), params: { user: user_new}
        patch "/users/1", params: {user: user_new}
        # expect(response).to be_successful
        expect(response).to have_http_status(:redirect)

        # user.reload
        # expect(user.email).to eq("ee234mail@columbia.edu")
      end

  #     # it "redirects to the user" do
  #     #   user = User.create! valid_attributes
        # patch user_url(user), params: { user: new_attributes }
  #     #   user.reload
  #     #   expect(response).to redirect_to(user_url(user))
  #     # end
    end

  #   # context "with invalid parameters" do
  #   #   it "renders a successful response (i.e. to display the 'edit' template)" do
  #   #     user = User.create! valid_attributes
  #   #     patch user_url(user), params: { user: invalid_attributes }
  #   #     expect(response).to be_successful
  #   #   end
  #   # end
  end

  describe "DELETE /destroy" do
    it "destroys the requested user" do
      post login_url(), params: { email: "admin@example.com", password: "AdminPassword",remember_me:"0" }
        
      # log_in(user)
      expect {
        delete "/users/1"
      }.to change(User, :count).by(0)
    end
  end



end
