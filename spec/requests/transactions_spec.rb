 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/transactions", type: :request do
  
  # Transaction. As you add validations to Transaction, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    {
      email: "email@columbia.edu",
      username: "Username",
      password: "Password Digest",
      password_confirmation: "Password Digest",
      address: "Address",
      rating_seller: 2.5,
      rating_buyer: 3.5,
      permission: 4
    }
  }

  let(:transaction_valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    {      
      item_id: 1, 
      seller_id: 1, 
      buyer_id: 2, 
      expected_deal_time: Time.now + 2.days,
      real_deal_time: nil,
      deal_address: "157 Amber Ave., Mondstadt",
      deal_price: 19.99,
      status: 200,
      buyer_rating: nil,
      seller_rating: nil,
      quantity: 1,
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      user = User.create! valid_attributes
      post login_url(), params: { email: "email@columbia.edu", password: "Password Digest",remember_me:"0" }
        
      # Transaction.create! valid_attributes
      get transactions_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get transactions_url(), params: {id:1}
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_transaction_url(), params: {item_id:1}
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    it "creates a new Transaction" do
      user = User.create! valid_attributes
      post login_url(), params: { email: "email@columbia.edu", password: "Password Digest",remember_me:"0" }
      expect {
        post transactions_url, params: { item_id:3,transaction: transaction_valid_attributes }
      }.to change(Transaction, :count).by(1)
    end

    it "creates a new Transaction" do
      user = User.create! valid_attributes
      post login_url(), params: { email: "email@columbia.edu", password: "Password Digest",remember_me:"0" }
      expect {
        post transactions_url, params: { item_id:1,transaction: transaction_valid_attributes }
      }.to change(Transaction, :count).by(1)
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested transaction" do
        post login_url(), params: { email: User.find(1).email, password: User.find(1).password,remember_me:"0" }
      end

      it "updates when current user is seller" do
        post login_url(), params: { email: "hu_tao@example.com", password: "HuTaoPassword",remember_me:"0" }
        
        # patch "/transactions/1", params: {transaction: new_attributes }
        patch "/transactions/1", params: {status: 120,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is buyer" do
        #user 3 id 4
        #buyer 200 - 201
        post login_url(), params: { email: "amber@example.com", password: "AmberPassword",remember_me:"0" }

        patch "/transactions/1", params: {status: 201,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is buyer" do
        #user 3 id 4
        #buyer 200 - 201
        post login_url(), params: { email: "hu_tao@example.com", password: "HuTaoPassword",remember_me:"0" }
        post checkins_url, params: {
          transaction_id:1,
          lat:1,
          lng:1      
        }
        post login_url(), params: { email: "amber@example.com", password: "AmberPassword",remember_me:"0" }
        post checkins_url, params: {
          transaction_id:1,
          lat:1,
          lng:1      
        }
        patch "/transactions/1", params: {status: 201,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is buyer" do
        #user 3 id 4
        #buyer 200 - 201
        post login_url(), params: { email: "klee@example.com", password: "KleePassword",remember_me:"0" }
        post checkins_url, params: {
          transaction_id:7,
          lat:2,
          lng:1      
        }
        post login_url(), params: { email: "hu_tao@example.com", password: "HuTaoPassword",remember_me:"0" }
        post checkins_url, params: {
          transaction_id:7,
          lat:1,
          lng:1      
        }
        patch "/transactions/7", params: {status: 201,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is buyer" do
        #user 3 id 4
        #buyer 200 - 213
        post login_url(), params: { email: "amber@example.com", password: "AmberPassword",remember_me:"0" }
        patch "/transactions/1", params: {status: 213,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is buyer" do
        #213
        post login_url(), params: { email: "amber@example.com", password: "AmberPassword",remember_me:"0" }
        patch "/transactions/4", params: {status: 201,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is seller" do
        #seller 110-120
        post login_url(), params: { email: "hu_tao@example.com", password: "HuTaoPassword",remember_me:"0" }
        patch "/transactions/5", params: {status: 120,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is seller" do
        #seller 110-121
        post login_url(), params: { email: "hu_tao@example.com", password: "HuTaoPassword",remember_me:"0" }
        patch "/transactions/5", params: {status: 121,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is buyer" do
        #buyer 110-121
        post login_url(), params: { email: "amber@example.com", password: "AmberPassword",remember_me:"0" }
        patch "/transactions/5", params: {status: 121,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is seller" do
        #seller 210-220
        post login_url(), params: { email: "hu_tao@example.com", password: "HuTaoPassword",remember_me:"0" }
        patch "/transactions/6", params: {status: 220,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is seller" do
        #seller 210-220
        post login_url(), params: { email: "amber@example.com", password: "AmberPassword",remember_me:"0" }
        post checkins_url, params: {
          transaction_id:6,
          lat:1,
          lng:1      
        }
        post login_url(), params: { email: "hu_tao@example.com", password: "HuTaoPassword",remember_me:"0" }
        post checkins_url, params: {
          transaction_id:6,
          lat:1,
          lng:1      
        }
        patch "/transactions/6", params: {status: 220,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end

      it "updates when current user is seller" do
        #seller 210-222
        post login_url(), params: { email: "hu_tao@example.com", password: "HuTaoPassword",remember_me:"0" }
        patch "/transactions/6", params: {status: 222,seller_rating:5,buyer_rating:5}
        expect(response).to be_successful
      end
    end

  end


end
