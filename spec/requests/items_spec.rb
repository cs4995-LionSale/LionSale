 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/items", type: :request do
  
  # Item. As you add validations to Item, be sure to
  # adjust the attributes here as well.
  # let(:user){

  # }

  let(:uvalid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    {
      email: "email@columbia.edu",
      username: "Username",
      password: "Password Digest",
      password_confirmation: "Password Digest",
      address: "Address",
      rating_seller: 2.5,
      rating_buyer: 3.5,
      permission: 4
    }
  }
  # let(:valid_attributes) {
  #   # skip("Add a hash of attributes valid for your model")
  #   # :title, :description, :seller_id, :price, :created_at, 
  #   # :updated_at, :status, :category_id, :picture
  #   {
  #     title: "book",
  #     description: "CS book",
  #     # seller_id: user.id,
  #     price: 11,
  #     # status: 1,
  #     category_id: 1,
  #   }
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  #   # {
  #   #   title: "book",
  #   #   description: "CS book",
  #   #   seller: "dddd",
  #   #   price: 11,
  #   #   # status: 1,
  #   #   category: 1,
  #   # }
  # }

  describe "GET /index" do
    it "without userid" do
      user = User.create! uvalid_attributes
      user.items_sold.build({title: "book",
          description: "CS book",
          price: 11,
          category_id: 1})
      # Item.create! valid_attributes
      get items_url
      expect(response).to be_successful
    end
    it "with userid" do
      user = User.create! uvalid_attributes
      user.items_sold.build({title: "book",
          description: "CS book",
          price: 11,
          category_id: 1})
      # Item.create! valid_attributes
      get items_url, params: { user_id: user.id }
      expect(response).to be_successful
    end
    it "with unkown userid" do
      user = User.create! uvalid_attributes
      user.items_sold.build({title: "book",
          description: "CS book",
          price: 11,
          category_id: 1})
      # Item.create! valid_attributes
      get items_url, params: { user_id: 333 }
      expect(response).to be_successful
    end
    it "with categoryid" do
      user = User.create! uvalid_attributes
      user.items_sold.build({title: "book",
          description: "CS book",
          price: 11,
          category_id: 1})
      # Item.create! valid_attributes
      category_id = 1
      get items_url, params: { category_id: category_id }
      expect(response).to be_successful
    end
    it "with known categoryid" do
      user = User.create! uvalid_attributes
      user.items_sold.build({title: "book",
          description: "CS book",
          price: 11,
          category_id: 1})
      # Item.create! valid_attributes
      cate1 = Category.create!({:name => "A"})
      cate2 = Category.create!({:name => "B",:parent_category => cate1})
      cate3 = Category.create!({:name => "C",:parent_category => cate2})
    
      # category_id = 1
      get items_url, params: { category_id: cate2.id }
      expect(response).to be_successful
    end
  end

  # describe "GET /show" do
  #   it "renders a successful response" do
  #     item = Item.create! valid_attributes
  #     get item_url(item)
  #     expect(response).to be_successful
  #   end
  # end

  describe "GET /new" do
    it "renders a successful response" do
      get new_item_url
      expect(response).to be_successful
    end
  end

  

  # describe "GET /edit" do
  #   it "render a successful response" do
  #     item = Item.create! valid_attributes
  #     get edit_item_url(item)
  #     expect(response).to be_successful
  #   end
  # end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Item" do
        user = User.create! uvalid_attributes
        # user.items_sold.build({title: "book",
        #   description: "CS book",
        #   price: 11,
        #   category_id: 1})
        # log_in(user)
        # user = User.create! valid_attributes
        post login_url(), params: { email: "email@columbia.edu", password: "Password Digest",remember_me:"0" }
      
        # post login_url(), params: { email: User.find(1).email, password: User.find(1).password,remember_me:"0" }
        post items_url, params: { item: {title: "book",
          description: "CS book",
          seller_id:1,
          price: 11,
          category_id: 1,
          stock:10,
          status:10,
          created_at:"20200101", 
          updated_at:"20200101",
          } }
        # puts(response.body)
        expect(response).to redirect_to(user_url(user))
      end

      # it "redirects to the created item" do
      #   post items_url, params: { item: valid_attributes }
      #   expect(response).to redirect_to(user_url(user))
      # end
    end

    # context "with invalid parameters" do
    #   it "does not create a new Item" do
    #     expect {
    #       post items_url, params: { item: invalid_attributes }
    #     }.to change(Item, :count).by(0)
    #   end

    #   it "renders a successful response (i.e. to display the 'new' template)" do
    #     post items_url, params: { item: invalid_attributes }
    #     expect(response).to be_successful
    #   end
    # end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do

  #     it "updates the requested item" do
  #       user = User.create! uvalid_attributes
  #       # user.items_sold.build({title: "book",
  #       #   description: "CS book",
  #       #   price: 11,
  #       #   category_id: 1})
  #       post item_url, params: { item_params: {title: "book",
  #         description: "CS book",
  #         price: 11,
  #         category_id: 1} }

  #       # item = Item.create! valid_attributes
  #       # patch item_url(item), params: { item: new_attributes }
  #       item.reload
  #       expect(response).to redirect_to(login_url)
  #     end

  #   end

   
  # end

  # describe "DELETE /destroy" do
  #   it "destroys the requested item" do
  #     item = Item.create! valid_attributes
  #     expect {
  #       delete item_url(item)
  #     }.to change(Item, :count).by(-1)
  #   end

  #   it "redirects to the items list" do
  #     item = Item.create! valid_attributes
  #     delete item_url(item)
  #     expect(response).to redirect_to(items_url)
  #   end
  # end
end
