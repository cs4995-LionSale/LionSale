 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/items", type: :request do
  
  # Item. As you add validations to Item, be sure to
  # adjust the attributes here as well.
  # let(:user){

  # }

  let(:uvalid_attributes) {
    {
      email: "email@columbia.edu",
      username: "Username",
      password: "Password Digest",
      password_confirmation: "Password Digest",
      address: "Address",
      rating_seller: 2.5,
      rating_buyer: 3.5,
      permission: 4
    }
  }

  describe "GET /index" do
    it "without userid" do
      user = User.create! uvalid_attributes
      user.items_sold.build({title: "book",
          description: "CS book",
          price: 11,
          category_id: 1})
      get items_url
      expect(response).to be_successful
    end
    it "with userid" do
      user = User.create! uvalid_attributes
      user.items_sold.build({title: "book",
          description: "CS book",
          price: 11,
          category_id: 1})
      get items_url, params: { user_id: user.id }
      expect(response).to be_successful
    end
    it "with unkown userid" do
      user = User.create! uvalid_attributes
      user.items_sold.build({title: "book",
          description: "CS book",
          price: 11,
          category_id: 1})
      get items_url, params: { user_id: 333 }
      expect(response).to be_successful
    end
    it "with categoryid" do
      user = User.create! uvalid_attributes
      user.items_sold.build({title: "book",
          description: "CS book",
          price: 11,
          category_id: 1})
      category_id = 1
      get items_url, params: { category_id: category_id }
      expect(response).to be_successful
    end
    it "with known categoryid" do
      user = User.create! uvalid_attributes
      user.items_sold.build({title: "book",
          description: "CS book",
          price: 11,
          category_id: 1})
      cate1 = Category.create!({:name => "A"})
      cate2 = Category.create!({:name => "B",:parent_category => cate1})
      cate3 = Category.create!({:name => "C",:parent_category => cate2})
      get items_url, params: { category_id: cate2.id }
      expect(response).to be_successful
    end
  end


  describe "GET /new" do
    it "renders a successful response" do
      get new_item_url
      expect(response).to be_successful
    end
  end

  
  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Item" do
        user = User.create! uvalid_attributes
        post login_url(), params: { email: "email@columbia.edu", password: "Password Digest",remember_me:"0" }
        post items_url, params: { item: {title: "book",
          description: "CS book",
          seller_id:1,
          price: 11,
          category_id: 1,
          stock:10,
          status:10,
          created_at:"20200101", 
          updated_at:"20200101",
          } }
        expect(response).to redirect_to(user_url(user))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      it "updates the requested item" do
        post login_url(), params: { email: "admin@example.com", password: "AdminPassword",remember_me:"0" }

        patch "/items/1", params: { item: {title: "book",
          description: "CS book",
          price: 11,
          category_id: 1} }
        expect(response).to have_http_status(:redirect)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested item" do
      post login_url(), params: { email: "admin@example.com", password: "AdminPassword",remember_me:"0" }
      expect {
        delete "/items/1"
      }.to change(Item, :count).by(0)
    end
  end
end
